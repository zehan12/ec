import {
  Action,
  ActionCreatorWithPayload,
  createAction,
  createSlice,
} from "@reduxjs/toolkit";
import { IDLE, PENDING, FULFILLED, REJECTED } from "../../config/constants.js";

interface AppState {
  active: boolean;
  fetchActiveStatus: string;
}

const initialState: AppState = {
  active: false,
  fetchActiveStatus: IDLE,
};

//Creating a mapping of all the action types for fetchActiveStatus;
export const fetchActiveActionTypes = {
  REQUEST: "/app/fetchActive/request",
  PENDING: "/app/fetchActive/pending",
  REJECTED: "/app/fetchActive/rejected",
  FULFILLED: "/app/fetchActive/fulfilled",
};

export const fetchActiveRequest: ActionCreatorWithPayload<object> = createAction(
  fetchActiveActionTypes.REQUEST
);

const fetchActivePendingReducer = (state: AppState) => {
  state.fetchActiveStatus = PENDING;
};

const fetchActiveRejectedReducer = (state: AppState) => {
  state.fetchActiveStatus = REJECTED;
};

interface fetchActiveFulfilledAction extends Action {
  type: string;
  payload:{
    data:boolean
  }
}

const fetchActiveFulfilledReducer = (
  state: AppState,
  action: fetchActiveFulfilledAction
) => {
  state.active = action.payload.data;
  state.fetchActiveStatus = FULFILLED;
};

// Create a app slice using createSlice
const appSlice = createSlice({
  name: "app",
  initialState,
  reducers: {
    reset: () => initialState,
  },
  extraReducers: (builder) => {
    builder.addCase(
      fetchActiveActionTypes.PENDING, 
      fetchActivePendingReducer
    );
    builder.addCase(
      fetchActiveActionTypes.FULFILLED,
      fetchActiveFulfilledReducer
    );
    builder.addCase(
      fetchActiveActionTypes.REJECTED,
      fetchActiveRejectedReducer
    );
  },
});

// Export the action creators generated by createSlice
export const { reset } = appSlice.actions;

// Export the reducer function generated by createSlice
export default appSlice.reducer;
